docker-compose.yml:
services:
  mysql:
    image: mysql:8.0
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: usuario
      MYSQL_DATABASE: ejercicio2Investigacion
      MYSQL_USER: usuario
      MYSQL_PASSWORD: usuario
    ports:
      - "3306:3306"
    networks:
      - backend_network
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "--host=localhost"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  backend:
    build:
      context: ./EjercicioDocker1
    container_name: spring_backend
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/ejercicio2Investigacion
      SPRING_DATASOURCE_USERNAME: usuario
      SPRING_DATASOURCE_PASSWORD: usuario
    networks:
      - backend_network

  frontend:
    build:
      context: ./angular-frontend
    container_name: angular_frontend
    depends_on:
      - backend
    ports:
      - "4200:80"
    networks:
      - backend_network

networks:
  backend_network:

volumes:
  mysql_data:


dockerfile del back:
# Usar OpenJDK 17
FROM openjdk:17-slim as build

# Instalar Maven manualmente
RUN apt-get update && apt-get install -y \
    wget \
    unzip && \
    wget https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.4/apache-maven-3.9.4-bin.zip -P /tmp && \
    unzip /tmp/apache-maven-3.9.4-bin.zip -d /opt && \
    ln -s /opt/apache-maven-3.9.4 /opt/maven && \
    ln -s /opt/maven/bin/mvn /usr/bin/mvn

# Copiar los archivos del proyecto
WORKDIR /app
COPY . /app

# Ejecutar Maven para construir el proyecto
RUN mvn clean package -DskipTests

# Crear la imagen para ejecutar el proyecto
FROM openjdk:17-slim
COPY --from=build /app/target/*.jar /app.jar

# Comando para ejecutar el .jar
ENTRYPOINT ["java", "-jar", "/app.jar"]


dockerfile del front:
FROM node:18 as build

WORKDIR /app

COPY package.json package-lock.json ./
RUN npm install

COPY . .

RUN npm run build --prod

FROM nginx:alpine
COPY --from=build /app/dist/angular-frontend /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]


app.module.ts:
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';  // Asegúrate de importar CommonModule
import { AppComponent } from './app.component';
import { ProductosComponent } from './components/productos/productos.component';
import { UsuariosComponent } from './components/usuarios/usuarios.component';

@NgModule({
  declarations: [
    AppComponent,
    ProductosComponent,  // Registra ProductosComponent
    UsuariosComponent    // Registra UsuariosComponent
  ],
  imports: [
    BrowserModule,
    CommonModule   // Importa CommonModule aquí para usar *ngFor
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }


app.routes.ts:
import { Routes } from '@angular/router';
import { UsuariosComponent } from './components/usuarios/usuarios.component';
import { ProductosComponent } from './components/productos/productos.component';

export const routes: Routes = [
  { path: '', redirectTo: '/usuarios', pathMatch: 'full' },
  { path: 'usuarios', component: UsuariosComponent },
  { path: 'productos', component: ProductosComponent }
];


app.config.ts:
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes'; 

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }), 
    provideRouter(routes)
  ]
};


app.component.ts:
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';
import { ProductosComponent } from './components/productos/productos.component'; // Importa ProductosComponent aquí
import { UsuariosComponent } from './components/usuarios/usuarios.component'; // Igualmente para UsuariosComponent

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css'],
  standalone: true,
  imports: [RouterOutlet, ProductosComponent, UsuariosComponent]  // Asegúrate de que esté en los imports
})
export class AppComponent {
  title = 'angular-frontend';
} 

app.component.html:
<h1>Lista de Usuarios</h1>
<app-usuarios></app-usuarios>

<h1>Lista de Productos</h1>
<app-productos></app-productos>

Los componentes estan enla ruta app/components/usuario y app/components/productos, y el service esta en app/services/api.service.ts. 
Dentro de productos esta:
productos.component.html:
<h2>Lista de Productos</h2>
<table style="border: 1;">
    <tr>
        <th>ID</th>
        <th>Nombre</th>
        <th>Descripción</th>
        <th>Precio</th>
        <th>Stock</th>
    </tr>
    <tr *ngFor="let producto of productos">
        <td>{{ producto.id }}</td>
        <td>{{ producto.nombre }}</td>
        <td>{{ producto.descripcion }}</td>
        <td>{{ producto.precio }}</td>
        <td>{{ producto.stock }}</td>
    </tr>
</table>

productos.component.ts:
import { Component, OnInit } from '@angular/core';
import { ApiService } from '../../services/api.service';

@Component({
  selector: 'app-productos',  // Este es el selector que se usa en el HTML
  templateUrl: './productos.component.html',
  styleUrls: ['./productos.component.css']
})
export class ProductosComponent implements OnInit {
  productos: any[] = [];

  constructor(private apiService: ApiService) { }

  ngOnInit() {
    this.apiService.getProductos().subscribe(data => {
      this.productos = data;
    });
  }
}


usuarios.component.html:
<h2>Lista de Usuarios</h2>
<table style="border: 1;">
    <tr>
        <th>ID</th>
        <th>Nombre</th>
        <th>Email</th>
    </tr>
    <tr *ngFor="let usuario of usuarios">
        <td>{{ usuario.id }}</td>
        <td>{{ usuario.nombre }}</td>
        <td>{{ usuario.email }}</td>
    </tr>
</table>

usuarios.component.ts:
import { Component, OnInit } from '@angular/core';
import { ApiService } from '../../services/api.service';

@Component({
  selector: 'app-usuarios',  // Asegúrate de que el selector sea app-usuarios
  templateUrl: './usuarios.component.html',
  styleUrls: ['./usuarios.component.css']
})
export class UsuariosComponent implements OnInit {
  usuarios: any[] = [];

  constructor(private apiService: ApiService) { }

  ngOnInit() {
    this.apiService.getUsuarios().subscribe(data => {
      this.usuarios = data;
    });
  }
}


index.html:
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>AngularFrontend</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>

main.ts:
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

application.properties:
spring.datasource.url=jdbc:mysql://localhost:3306/ejercicio2Investigacion
spring.datasource.username=usuario
spring.datasource.password=usuario
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

controlador:
package com.daw.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.daw.datamodel.entities.Producto;
import com.daw.datamodel.entities.Usuario;
import com.daw.service.Servicio;

@RestController
public class Controller {

	@Autowired
	private Servicio servicio;

	@GetMapping("/usuarios")
	public ResponseEntity<List<Usuario>> listarUsuarios() {
		return ResponseEntity.ok().body(servicio.obtenerUsuarios());
	}

	@GetMapping("/productos")
	public ResponseEntity<List<Producto>> listarProductos() {
		return ResponseEntity.ok().body(servicio.obtenerProductos());
	}

}


servicio:
package com.daw.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.daw.datamodel.entities.Producto;
import com.daw.datamodel.entities.Usuario;
import com.daw.datamodel.repository.ProductoRepository;
import com.daw.datamodel.repository.UsuarioRepository;

@Service
public class Servicio {

	@Autowired
	private UsuarioRepository usuarioRepository;

	@Autowired
	private ProductoRepository productoRepository;

	public List<Usuario> obtenerUsuarios() {
		return usuarioRepository.findAll();
	}

	public List<Producto> obtenerProductos() {
		return productoRepository.findAll();
	}

}


entidad:
package com.daw.datamodel.entities;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "productos")
public class Producto {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	private String nombre;
	private String descripcion;
	private Double precio;
	private Integer stock;

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getNombre() {
		return nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public String getDescripcion() {
		return descripcion;
	}

	public void setDescripcion(String descripcion) {
		this.descripcion = descripcion;
	}

	public Double getPrecio() {
		return precio;
	}

	public void setPrecio(Double precio) {
		this.precio = precio;
	}

	public Integer getStock() {
		return stock;
	}

	public void setStock(Integer stock) {
		this.stock = stock;
	}

}

package com.daw.datamodel.entities;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name = "usuarios")
public class Usuario {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    private String nombre;
    private String email;
	private String contraseña;

	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public String getNombre() {
		return nombre;
	}
	public void setNombre(String nombre) {
		this.nombre = nombre;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	public String getContraseña() {
		return contraseña;
	}
	public void setContraseña(String contraseña) {
		this.contraseña = contraseña;
	}
    
    
}


repositorio:
package com.daw.datamodel.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.daw.datamodel.entities.Producto;

public interface ProductoRepository extends JpaRepository<Producto, Long> {
}

package com.daw.datamodel.repository;

import org.springframework.data.jpa.repository.JpaRepository;

import com.daw.datamodel.entities.Usuario;

public interface UsuarioRepository extends JpaRepository<Usuario, Long> {
}


Haz los cambios necesarios y preguntame todo lo que necesites saber 